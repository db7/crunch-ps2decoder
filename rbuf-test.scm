(import (scheme base)
        (scheme write)
        (chicken syntax)
        (crunch c)
        (crunch declarations)
        rbuf)

(define-syntax print
    (syntax-rules ()
        ((_ VAL ...)
         (begin
             (begin (display VAL) (display " "))
             ...
             (newline)))))

(define (main)
    (let ((rb (make-rbuf 8)))
        (print "(empty? rb)    =>" (rbuf-empty? rb))
        (print "(push! rb 123) =>" (rbuf-push! rb 123))
        (print "(empty? rb)    =>" (rbuf-empty? rb))
        (print "(pop! rb)      =>" (rbuf-pop! rb))
        (print "(empty? rb)    =>" (rbuf-empty? rb))
        (print "(push! rb 1)   =>" (rbuf-push! rb 1))
        (print "(push! rb 2)   =>" (rbuf-push! rb 2))
        (print "(push! rb 3)   =>" (rbuf-push! rb 3))
        (print "(push! rb 4)   =>" (rbuf-push! rb 4))
        (print "(push! rb 5)   =>" (rbuf-push! rb 5))
        (print "(push! rb 6)   =>" (rbuf-push! rb 6))
        (print "(push! rb 7)   =>" (rbuf-push! rb 7))
        (print "(push! rb 8)   =>" (rbuf-push! rb 8))
        (print "(push! rb 1)   =>" (rbuf-push! rb 9))
        (print "(pop! rb)      =>" (rbuf-pop! rb))
        (print "(pop! rb)      =>" (rbuf-pop! rb))
        (print "(pop! rb)      =>" (rbuf-pop! rb))
        (print "(pop! rb)      =>" (rbuf-pop! rb))
        (print "(pop! rb)      =>" (rbuf-pop! rb))
        (print "(pop! rb)      =>" (rbuf-pop! rb))
        (print "(pop! rb)      =>" (rbuf-pop! rb))
        (print "(pop! rb)      =>" (rbuf-pop! rb))
        (print "(pop! rb)      =>" (rbuf-pop! rb))
        (print "(pop! rb)      =>" (rbuf-pop! rb))
        #;(print "(=? x y) =>" (u8=? x y))
        #;(print "(=? (+ 1 x) y) =>" (u8=? (u8+ one x) y))
        #;(print "(+ 155 x) =>" (u8->integer (u8+ z x)))
        #;(print "(+ 156 x) =>" (u8->integer (u8+ (u8+ one z) x)))
        #;(print "(+ 157 x) =>" (u8->integer (u8+ (u8+ one (u8+ one z)) x)))))

